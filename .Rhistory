p=3
divRounded(n,d,p)
# Then
divRounded=function(numerator,denominator,precision=2){
if (denominator==0){
return('0 en el denominador')
}else{
result = numerator/denominator
return (round(result, precision))}
}
n=13
d=12
p=3
divRounded(n,d,p)
inputArgs=list(precision=3,numerator=13,denominator=12)
do.call(divRounded,inputArgs)
factors=function(number){
vectorOfAnswers=c() # para guardar respuestas
for (i in 1:number){
#si el residuo de 'number'/'i' es igual a cero...
if ((number %% i) == 0){
# ...añade 'i' a la respuesta!
vectorOfAnswers=c(vectorOfAnswers,i)
}
}
return (vectorOfAnswers)
}
factors(20)
factors=function(number){
vectorOfAnswers=c() # para guardar respuestas
for (i in 1:number){
#si el residuo de 'number'/'i' es igual a cero...
if ((number/2 %% i) == 0){
# ...añade 'i' a la respuesta!
vectorOfAnswers=c(vectorOfAnswers,i)
}
}
return (vectorOfAnswers)
}
factors(20)
factors=function(number){
vectorOfAnswers=c() # para guardar respuestas
for (i in 1:number/2){
#si el residuo de 'number'/'i' es igual a cero...
if ((number %% i) == 0){
# ...añade 'i' a la respuesta!
vectorOfAnswers=c(vectorOfAnswers,i)
}
}
return (vectorOfAnswers)
}
factors(20)
factors=function(number){
vectorOfAnswers=c() # para guardar respuestas
for (i in 1:(number/2)){
#si el residuo de 'number'/'i' es igual a cero...
if ((number %% i) == 0){
# ...añade 'i' a la respuesta!
vectorOfAnswers=c(vectorOfAnswers,i)
}
}
return (vectorOfAnswers)
}
factors(20)
factors=function(number){
vectorOfAnswers=c() # para guardar respuestas
for (i in 1:number){
#si el residuo de 'number'/'i' es igual a cero...
if ((number %% i) == 0){
# ...añade 'i' a la respuesta!
vectorOfAnswers=c(vectorOfAnswers,i)
}
}
return (vectorOfAnswers)
}
double=function(x){
return (2*x)}
myVector=c(1,2,3)
double(myVector)
myList=list(1,2,3)
double(myList)
Map(double,myVector)
myVector=c(1,2,3)
Map(double,myVector) # devuelte lista
Map(double,myList) # devuelte lista
Map(double,myList) # devuelte lista
mapply(double,myVector)
mapply(double,myLista)
mapply(double,myList)
numberA=c(10,20,30,40,50)
numberB=c(6,7,8,9,10)
dataDF=data.frame(numberA,numberB)
dataDF
numberA=c(10,20,30,40,50)
numberB=c(6,7,8,9,10)
dataDF=as.data.frame(numberA,numberB)
dataDF
numberA=c(10,20,30,40,50)
numberB=c(6,7,8,9,10)
dataDF=data.frame(numberA,numberB,row.names = T)
dataDF
numberA=c(10,20,30,40,50)
numberB=c(6,7,8,9,10)
dataDF=data.frame(numberA,numberB,row.names = NA)
numberA=c(10,20,30,40,50)
numberB=c(6,7,8,9,10)
dataDF=data.frame(numberA,numberB,row.names = NULL)
dataDF
numberA=c(10,20,30,40,50)
numberB=c(6,7,8,9,10)
dataDF=data.frame(numberA,numberB)
dataDF
# use a copy of the orginal
dataDF2=dataDF
# see the copy
dataDF2
for (column in 1:ncol(dataDF2)){
for (row in 1:nrow(dataDF2[column])){
dataDF2[row,column]=double(dataDF2[row,column])
}
}
# updated:
dataDF2
dataDF
dataDF
double(dataDF)
lapply(dataDF,double)
# remember you are SEEING the result, but no changes to the orginal data frame!
lapply(dataDF,double)
# remember you are SEEING the result, but no changes to the orginal data frame!
as.data.frame(lapply(dataDF,double))
as.data.frame(lapply(dataDF,double))
# you are adding by row:
apply(dataDF,1,sum) # 1 to apply by row (2 for column).
# you are adding by row:
apply(dataDF,1,sum) # 1 to apply by row (2 for column).
# you are adding the column values here:
as.data.frame(lapply(dataDF,sum))
for (column in 1:ncol(dataDF2)){
for (row in 1:nrow(dataDF2[column])){
dataDF2[row,column]=double(dataDF2[row,column])
}
}
# updated:
dataDF2
dataDF2=dataDF
# aqui está la copia
dataDF2
for (column in 1:ncol(dataDF2)){
for (row in 1:nrow(dataDF2[column])){
dataDF2[row,column]=double(dataDF2[row,column])
}
}
# updated:
dataDF2
dataDF
double(dataDF)
lapply(dataDF,double)
# remember you are SEEING the result, but no changes to the orginal data frame!
as.data.frame(lapply(dataDF,double))
as.data.frame(lapply(dataDF[,c(2)],double))
lapply(dataDF[,c(2)],double)
dataDF[,c(2)]=lapply(dataDF[,c(2)],double)
dataDF
numberA=c(10,20,30,40,50)
numberB=c(6,7,8,9,10)
dataDF=data.frame(numberA,numberB)
dataDF
dataDF2=dataDF
# aqui está la copia
dataDF2
for (column in 1:ncol(dataDF2)){
for (row in 1:nrow(dataDF2[column])){
dataDF2[row,column]=double(dataDF2[row,column])
}
}
# updated:
dataDF2
dataDF
double(dataDF)
lapply(dataDF,double)
as.data.frame(lapply(dataDF,double))
# se aplica por sólo por columnas:
as.data.frame(lapply(dataDF,sum))
# por fila
apply(dataDF,1,sum)
# por columna
apply(dataDF,2,sum)
# por columna
apply(dataDF,2,sum)
1+1
#comentario
1+1
nombre=c( "George Harrison", "Mick Jagger", "Tom Jones", "Davy Jones",
"John Lennon", "Paul McCartney", "Jimmy Page", "Joe Perry", "Elvis Presley")
instrumento=c("Guitarra", "Voz", "Voz", "Voz", "Guitarra", "Bajo",
"Guitarra", "Guitarra", "Voz")
edad = c( 58, 74, 78, 66, 40, 75, 74, 67, 62)
vivo = c(F,T,T,F,F,T,T,T,F)
nombre=c( "George Harrison", "Mick Jagger", "Tom Jones", "Davy Jones",
"John Lennon", "Paul McCartney", "Jimmy Page", "Joe Perry", "Elvis Presley")
instrumento=c("Guitarra", "Voz", "Voz", "Voz", "Guitarra", "Bajo",
"Guitarra", "Guitarra", "Voz")
edad = c( 58, 74, 78, 66, 40, 75, 74, 67, 62)
vivo = c(F,T,T,F,F,T,T,T,F)
####
artistas=data.frame(nombre,instrumento,edad,vivo)
head(artistas)
artistas[which(nombre=='ElvisPresley')]
artistas[which(nombre=='ElvisPresley')]
artistas[which(nombre=='Elvis Presley')]
artistas[which(nombre=='Elvis Presley'),]
artistas[which(nombre=='Elvis Presley'),]$edad
artistas[which(nombre=='Elvis Presley'),]$edad==42
artistas[which(nombre=='Elvis Presley'),]$edad=42
head(artistas)
View(artistas)
startsWith(artistas$nombre,'Elvi')
startsWith(artistas$nombre,'E')
artistas$nombre
nombre=c( "George Harrison", "Mick Jagger", "Tom Jones", "Davy Jones",
"John Lennon", "Paul McCartney", "Jimmy Page", "Joe Perry", "Elvis Presley")
instrumento=c("Guitarra", "Voz", "Voz", "Voz", "Guitarra", "Bajo",
"Guitarra", "Guitarra", "Voz")
edad = c( 58, 74, 78, 66, 40, 75, 74, 67, 62)
vivo = c(F,T,T,F,F,T,T,T,F)
####
artistas=data.frame(nombre,instrumento,edad,vivo,stringsAsFactors = F)
artistas[which(nombre=='Elvis Presley'),]$edad=42
startsWith(artistas$nombre,'E')
artistas[startsWith(artistas$nombre,'Elvi'),]
artistas[startsWith(artistas$nombre,'Elvi'),]$edad
artistas[startsWith(artistas$nombre,'Elvi'),]$edad=23
View(artistas)
v=artistas[startsWith(artistas$nombre,'Elvis'),]
length(v)
nrow(v)
nombre=c( "George Harrison", "Mick Jagger", "Tom Jones", "Davy Jones",
"John Lennon", "Paul McCartney", "Jimmy Page", "Joe Perry", "Elvis Presley")
instrumento=c("Guitarra", "Voz", "Voz", "Voz", "Guitarra", "Bajo",
"Guitarra", "Guitarra", "Voz")
edad = c( 58, 74, 78, 66, 40, 75, 74, 67, 62)
vivo = c(F,T,T,F,F,T,T,T,F)
####
artistas=data.frame(nombre,instrumento,edad,vivo)
head(artistas)
artistas[which(nombre=='Elvis Presley'),]$edad=42
View(artistas)
artistas=data.frame(nombre,instrumento,edad,vivo,stringsAsFactors = F)
#artistas[startsWith(artistas$nombre,'Elvis'),]$edad=42
View(artistas)
artistas=data.frame(nombre,instrumento,edad,vivo,stringsAsFactors = F)
artistas[startsWith(artistas$nombre,'Elvis'),]$edad=42
artistas=data.frame(nombre,instrumento,edad,vivo,stringsAsFactors = F)
v=artistas[startsWith(artistas$nombre,'Elvis'),]
if(nrow(v)==1){
artistas[startsWith(artistas$nombre,'Elvis'),]$edad=42
}
View(artistas)
artistas[which(instrumento=='bajo'),]
artistas[which(instrumento in c('bajo','Bajo')),]
artistas[which(instrumento %in% c('bajo','Bajo')),]
artistas[which(instrumento %in% c('bajo','Bajo','BAJO')),]
artistas[artistas$instrumento=='Bajo',]
artistas$instrumento=tolower(artistas$instrumento)
View(artistas)
artistas$instrumento=tolower(artistas$instrumento)
artistas[which(instrumento =='bajo'),]
View(artistas)
View(artistas)
artistas=data.frame(nombre,instrumento,edad,vivo,stringsAsFactors = F)
v=artistas[startsWith(artistas$nombre,'Elvis'),]
if(nrow(v)==1){
artistas[startsWith(artistas$nombre,'Elvis'),]$edad=42
}
artistas[artistas$instrumento=='Bajo',]
artistas[which(instrumento %in% c('bajo','Bajo','BAJO')),]
artistas$instrumento=tolower(artistas$instrumento)
artistas[which(instrumento =='bajo'),]
artistas$instrumento=tolower(artistas$instrumento)
artistas[which(instrumento =='bajo')]
artistas$instrumento=tolower(artistas$instrumento)
artistas[which(instrumento =='bajo'),]
artistas$instrumento=tolower(artistas$instrumento)
artistas[which(instrumento =='bajo'),]
View(artistas)
artistas[which(instrumento =='bajo'),]
artistas
artistas$instrumento=tolower(artistas$instrumento)
artistas[which(instrumento =='bajo'),]
artistas$instrumento=tolower(artistas$instrumento)
artistas[which(instrumento =='Bajo'),]
View(artistas)
artistas$instrumento=tolower(artistas$instrumento)
nombre=c( "George Harrison", "Mick Jagger", "Tom Jones", "Davy Jones",
"John Lennon", "Paul McCartney", "Jimmy Page", "Joe Perry", "Elvis Presley")
instrumento=c("Guitarra", "Voz", "Voz", "Voz", "Guitarra", "Bajo",
"Guitarra", "Guitarra", "Voz")
edad = c( 58, 74, 78, 66, 40, 75, 74, 67, 62)
vivo = c(F,T,T,F,F,T,T,T,F)
####
artistas=data.frame(nombre,instrumento,edad,vivo)
artistas=data.frame(nombre,instrumento,edad,vivo,stringsAsFactors = F)
v=artistas[startsWith(artistas$nombre,'Elvis'),]
if(nrow(v)==1){
artistas[startsWith(artistas$nombre,'Elvis'),]$edad=42
}
artistas[artistas$instrumento=='Bajo',]
artistas[which(instrumento %in% c('bajo','Bajo','BAJO')),]
artistas$instrumento=tolower(artistas$instrumento)
artistas[which(instrumento =='bajo'),]
View(artistas)
artistas$instrumento=tolower(artistas$instrumento)
artistas[which(artistas$instrumento =='bajo'),]
instrumento
artistas$instrumento=tolower(artistas$instrumento)
artistas[which(artistas$instrumento =='bajo'),]
instrumento
edad
View(artistas)
artistas[which(artistas$nombre=='Elvis Presley'),]$edad=42
nombre=c( "George Harrison", "Mick Jagger", "Tom Jones", "Davy Jones",
"John Lennon", "Paul McCartney", "Jimmy Page", "Joe Perry", "Elvis Presley")
instrumento=c("Guitarra", "Voz", "Voz", "Voz", "Guitarra", "Bajo",
"Guitarra", "Guitarra", "Voz")
edad = c( 58, 74, 78, 66, 40, 75, 74, 67, 62)
vivo = c(F,T,T,F,F,T,T,T,F)
####
artistas=data.frame(nombre,instrumento,edad,vivo)
head(artistas)
artistas[which(artistas$nombre=='Elvis Presley'),]$edad=42
View(artistas)
artistas=data.frame(nombre,instrumento,edad,vivo,stringsAsFactors = F)
artistas[startsWith(artistas$nombre,'Elvis'),]$edad=42
artistas=data.frame(nombre,instrumento,edad,vivo,stringsAsFactors = F)
v=artistas[startsWith(artistas$nombre,'Elvis'),]
if(nrow(v)==1){
artistas[startsWith(artistas$nombre,'Elvis'),]$edad=42
}
artistas$instrumento=tolower(artistas$instrumento)
artistas[which(artistas$instrumento =='bajo'),]
artistas[(artistas$edad>60) & (artistas$vivo),]
artistas[(artistas$edad>60) & (artistas$vivo),]$instrumento
unique(artistas[(artistas$edad>60) & (artistas$vivo),]$instrumento)
#artistas_ordenada
artistas[order(edad),]
#artistas_ordenada
artistas[order(edad)]
#artistas_ordenada
artistas[,order(edad)]
#artistas_ordenada
artistas[order(edad),]
#artistas_ordenada
artistas[order(-edad),]
#artistas_ordenada
artistas[order(-artistas$edad),]
#artistas_ordenada
artistas[order(artistas$edad),]
(artistas_ordenada=artistas[order(artistas$edad),])
nombre=c("George Harrison", "Mick Jagger", "John Lennon", "Paul McCartney",
"Jimmy Page", "Joe Perry")
banda = c("The Beatles", "The Rolling Stones", "The Beatles", "The Beatles",
"Led Zeppelin", "Aerosmith")
grammy=c(28, 4, 28, 28, 5, 4)
bandas=data.frame(nombre,banda,grammy,stringsAsFactors = F)
nombre=c("George Harrison", "Mick Jagger", "John Lennon", "Paul McCartney",
"Jimmy Page", "Joe Perry")
banda = c("The Beatles", "The Rolling Stones", "The Beatles", "The Beatles",
"Led Zeppelin", "Aerosmith")
grammy=c(28, 4, 28, 28, 5, 4)
bandas=data.frame(nombre,banda,grammy,stringsAsFactors = F)
View(bandas)
View(artistas)
View(bandas)
merge(artistas,banda,all.x = T)
View(bandas)
merge(artistas,bandas,all.x = T)
(artistas_total=merge(artistas,bandas,all.x = T))
nrow(artistas_total)
artistas_total[which.max(artistas_total$edad)]
artistas_total[which.max(artistas_total$edad),]
artistas_total[which.max(artistas_total$edad),]$nombre
artistas_total[artistas_total$edad=max(artistas_total$edad),]$nombre
artistas_total[artistas_total$edad==max(artistas_total$edad),]$nombre
(artistas_ordenada=artistas_ordenada[order(-artistas_ordenada$grammy),])
(artistas_ordenada=artistas_ordenada[order(artistas_ordenada$grammy),])
artistas_ordenada$grammy
artistas_total[order(artistas_total$grammy),])
artistas_total[order(artistas_total$grammy),]
artistas_total[order(-artistas_total$grammy),]
View(artistas_ordenada)
artistas_total[artistas_total$grammy<5,]
artistas_total[complete.cases(artistas_total$grammy)<5,]
artistas_total[!is.na(artistas_total$grammy)<5,]
!is.na(artistas_total$grammy)
artistas_total[!is.na(artistas_total$grammy) & (artistas_total$grammy<5),]
artistas_total$grammy<5
artistas_total[complete.cases(artistas_total$grammy<5),]
artistas_total[artistas_total$grammy<5,]
complete.cases(artistas_total[artistas_total$grammy<5,])
artistas_total[complete.cases(artistas_total[artistas_total$grammy<5,]),]
artistas_total[complete.cases(artistas_total[artistas_total$grammy<5,])$grammy,]
artistas_total[which.max(artistas_total$edad),]
artistas_total[which.max(artistas_total$edad),]$instrumento
artistas[which(artistas$instrumento %in% c('bajo','Bajo','BAJO')),]
sub=artistas_total[artistas_total$banda=='The Beatles',]
sub[sub$edad==max(sub$edad) ]$instrumento
sub=artistas_total[artistas_total$banda=='The Beatles',]
sub[sub$edad==max(sub$edad), ]$instrumento
(sub=artistas_total[artistas_total$banda=='The Beatles',])
#sub[sub$edad==max(sub$edad),]$instrumento
(sub=artistas_total[artistas_total$banda=='The Beatles',])
sub[sub$edad==max(sub$edad),]
sub
sub
(sub=artistas_total[artistas_total$banda=='The Beatles',])
sub[sub$edad==max(sub$edad,na.rm = T),]
(sub=artistas_total[artistas_total$banda=='The Beatles',])
sub[sub$edad==max(sub$edad,na.rm = T),]$instrumento
(sub=artistas_total[artistas_total$banda=='The Beatles',])
sub[sub$edad==max(sub$edad,na.rm = T),]$instrumento
(sub=artistas_total[artistas_total$banda=='The Beatles',])
sub[sub$edad==max(sub$edad,na.rm = T),]$instrumento
sub=artistas_total[artistas_total$banda=='The Beatles',]
sub=sub[complete.cases(sub),]
sub[sub$edad==max(sub$edad),]$instrumento
artistas[which(artistas$instrumento %in% c('bajo')),]
load("~/Documents/GITHUBs/preprocesamiento/testindex2.RData")
testindex2
setwd("~/Documents/GITHUBs/preprocesamiento")
load(testindex2)
ls
ls()
load("testindex2.RData")
testindex2
load("~/Documents/GITHUBs/preprocesamiento/testindex2.RData")
load("~/Documents/GITHUBs/preprocesamiento/testindex2.RData")
load("testindex2.RData")
load("testindex2")
load("testindex2.RData")
x=load("testindex2.RData")
load("testindex2.rds")
readRDS(file = "testindex2.rds")
readRDS(file = "testindex2.RData")
load("testindex2.RData")
head(testindex2)
load(file="testindex2.RData")
head(testindex2)
load("~/Documents/GITHUBs/preprocesamiento/testindex2.RData")
load(file="testindex")
head(testindex2)
load(file="testindex2.RData")
head(testindex2)
setwd("~/Documents/GITHUBs/preprocesamiento")
load(file="testindex2.RData")
head(testindex2)
?load
load(file="testindex2.RData",verbose = T)
head(my_df)
str(my_df)
my_data <- readRDS("testindex2.RData")
my_data <- readRDS("testindex2.rds")
load(file="test2.RData",verbose = T)
load(file="test2.RData",verbose = T)
str(test2)
load(file="test2",verbose = T)
load(file="test2.RData",verbose = T)
load(file="testindex",verbose = T)
load(file="test3",verbose = T)
str(test3)
my_data <- readRDS("test3")
load(file="test3",verbose = T)
str(test3)
load(file="testOrd",verbose = T)
str(testOrd)
load(file="testOrd",verbose = T)
str(testOrd)
load(file="testOrd",verbose = T)
str(testOrd)
View(testOrd)
str(testOrd)
head(testOrd)
str(testOrd)
new=testOrd
View(new)
new$Country
new$FreedomintheWorld
new=read.dta("testST.dta")
library(foreign)
new=read.dta("testST.dta")
View(new)
str(new)
new=read.dta("testST.dta")
str(new)
new=read.dta("testST.dta")
str(new)
new=read.dta("testST.dta")
str(new)
View(new)
new2=read_dta("testST.dta")
library(haven)
new2=read_dta("testST.dta")
str(new2)
View(new2)
head(new2)
new2=read_dta("testST.dta")
str(new2)
head(new2)
new2=read_dta("testST.dta")
str(new2)
head(new2)
?load
